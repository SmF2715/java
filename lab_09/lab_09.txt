
1.	Какая общая форма вызова класса из пакета?
PackageName.ClassName

2.	Как использовать одно имя класса в разных пакетах и в разных каталогах (папках)?
// 1. Создается объект класса MyClass01 из пакета MyPackage01
MyPackage01.MyClass01 mc0101 = new MyPackage01.MyClass01();

// 2. Создается объект класса MyClass01 из пакета MyPackage02
MyPackage02.MyClass01 mc0201 = new MyPackage02.MyClass01();

// 3. Создается объект класса MyClass01 из пакета MyPackage02.MyFolder02
MyPackage02.MyFolder02.MyClass01 mc020201 = new MyPackage02.MyFolder02.MyClass01();

3.	Какое назначение директивы import? Общая форма?
Подключение сторонних библиотек и пакетов.

4.	Как в директиве import указать, что могут быть использованы все классы из данного пакета?
Import java.*;
Что собой представляет ключевое слово package?
Ключевое слово package задает имя библиотеки, в которую могут входить разное количество компилированных модулей. Компилированные модули – это файлы с расширением .java.

5.	Что такое компилированный модуль в Java?

Файл, содержащий код на ЯП Java и имеющий расширение .java.

6.	Какие требования к реализации компилированного модуля (.java)?
имя компилированного модуля должно иметь расширение .java;
имя компилированного модуля без учета расширения .java должно совпадать с именем открытого (public) класса, который реализован в этом модуле;
имя компилированного модуля и имя реализованного в нем открытого класса должны начинаться из большой буквы;
в компилированном модуле может быть не более одного открытого (public) класса. Если в компилированном модуле есть еще другие (вспомогательные) классы, то они должны быть скрытыми (без модификатора public).

7.	Сколько классов могут быть реализованы в компилированном модуле?

Бесконечное множество, но с модификатором public – только 1.

8.	Какое назначение файлов с расширением .class?

Файлы с расширением .class получаются в результате компиляции файлов с расширением .java (компилированных модулей). Файлы с расширением .class есть промежуточными файлами, которые затем объединяются компоновщиком в исполнительный модуль.

9.	Какие преимущества дает использование ключевых слов package и import?

Можно использовать разные пространства имён и избегать конфликтов между создателями классов.

10.	Какие причины в необходимости правильного управления доступом к содержимому библиотек на языке Java?

Некоторый код не должен быть доступен клиентам-программистам, а другой – напротив, для облегчения работы сторонним разработчикам.
 
11.	Для чего нужно уметь правильно применять средства управления доступом?

Правильное управление доступом к программному коду означает сокрытие кода, который не может использоваться программистами-клиентами, и, наоборот, общедоступность кода, который может быть использован сторонними разработчиками.
В этом случае важным есть умение выделять переменную (изменчивую) составляющую программного кода от постоянной составляющей. Утаивание реализации есть основной идеей (основным смыслом) управления доступом.

12.	Какие существуют уровни доступа к классам, размещенным в пакетах?

Пакетный и public.

13.	Что означает термин «пакетный» уровень доступа (package access)?

Класс с пакетным уровнем доступа виден только в пределах данного пакета.

14.	Какие преимущества дает использование доступа в пределах пакета (по умолчанию)?

взаимосвязанные классы группируются в границах одного пакета. Эти классы легко взаимодействуют между собой;
нет избыточности кода чтобы доступиться к нужным классам, которые помещены в одинаковых пакетах. А, значит, код становится более читабельным;
код пакета есть полностью контролируемый в пределах пакета. Никто не может доступиться к классам за пределами пакета, кроме Ваших собственных классов, которые реализованы в пакете.

15.	Что значит тип доступа public для класса реализованного в пакете?

То, что он может быть доступен в других пакетах.

16.	Можно ли в объявлении имени класса добавлять модификатор доступа private?

Нет.

17.	Можно ли в объявлении имени класса добавлять модификатор доступа protected?

Нет.
